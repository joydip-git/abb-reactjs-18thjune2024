1. React JS
	a. Client side UI development library
	b. SPA
	c. React JS frameworks: Next JS, Gatsby etc. 
	d. React JS uses Virtual DOM

2. create-react-app tool


in React Component's design only one root react element can be present

JavaScript or TypeScript XML
with JSX/TSX:
const headerElement: JSX.Element = (
        <h2 id= "mainHeader" style = { styleObj }>
            <span>{ message } </span>
            <span> { messageNext } </span>
        </h2>
    )

without JSX/TSX:
import { createElement } from "react"
    const spanFirstElement = createElement(
        'span',
        {},
        message
    )
    const spanSecondElement = createElement(
        'span',
        {},
        messageNext
    )
    const headerElement = createElement(
        'h2',
        {
            id: 'mainHeader',
            style: { styleObj }
        },
        [spanFirstElement, spanSecondElement]
    )
    

with JSX/TSX

components:
	a. functional: presentational/ stateless
	b. class: stateful

pass data from parent to nested: using property object (props) and data binding
pass data from nested to parent: use event and event binding

Hooks => React JS APIs which provide same facilities in the functional component which are available with class component (such as- state, lifecyle etc.)
state hook => 
	useState()
	const arr = useState<number>(0)
	const valueState =	arr[0]
	const setValueState = arr[1]

	const [valueState, setValueState]= useState<number>(0)


state => intrinsic part of a component, It is NEVER shared with other components

shared storage => one component can save data and another can get the data